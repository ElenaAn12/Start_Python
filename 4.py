# ------------------------- # 1 # ------------------------- #

# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета
# заработной платы сотрудника. В расчете необходимо использовать формулу:
# (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.

from sys import argv

def calc(a1, a2, a3):
    return (float(a1) * float(a2)) + float(a3)

if len(argv) == 4:
    print('Имя скрипта: ', argv[0])
    print('Выработка в часах: ', argv[1])
    print('Ставка в часах: ', argv[2])
    print('Премия: ', argv[3])
    print(calc(argv[1], argv[2], argv[3]))
else:
    print('Скрипту для правильно работы нужно указать 3 параметра через пробел')

# ------------------------- # 2 # ------------------------- #

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

a = [3, 45, 56, 67, 2334, 23, 21, 54, 74, 34, 98, 43, 678]
b = [a[i] for i in range(len(a)) if i == 0 or a[i] > a[i-1]]
print(b)

# ------------------------- # 3 # ------------------------- #

# 3. Для чисел в пределах от 20 до 240 найти числа,
# кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

a = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(a)

# ------------------------- # 4 # ------------------------- #

# 4. Представлен список чисел. Определить элементы списка,
# не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

import numpy
a = numpy.random.randint(1, 20, 15)
b = [a[i] for i in range(len(a)) if i == 0 or a[i] not in a[0:i]]
print('a = ', a)
print('b = ', b)

# ------------------------- # 5 # ------------------------- #

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
# b = reduce(lambda x, y: x * y, [list(range(100, 1001))[i] for i in range(len(list(range(100, 1001)))) if i % 2 == 0])
b = reduce(lambda x, y: x * y, [i for i in range(100, 1001) if i % 2 == 0])
print(b)

# ------------------------- # 6 # ------------------------- #

# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from sys import argv
from itertools import count
from itertools import cycle

def script1 (arg1, arg2):
    l = []
    for i in count(arg1):
        if i > arg2:
            break
        else:
            l.append(i)
    return l

def script2(arg1, arg2):
    count = 0
    l = []
    for i in cycle(arg1):
        if count > arg2*len(arg1)-1:
            break
        l.append(i)
        count += 1
    return l

if len(argv) == 4:
    print('Имя скрипта: ', argv[0])
    print('Ключ скрипта 1 скрипт - 1, 2 скрипт - 2: ', argv[1])
    if argv[1] == '1':
        print('С какого числа начать генерацию?: ', argv[2])
        print('До какого числа геерировать список: ', argv[3])
        print('Результат: ', script1(int(argv[2]), int(argv[3])))
    elif argv[1] == '2':
        print('Какой список нужно повторять (через запятую без пробела)?', argv[2])
        print('Сколько раз повторять: ', argv[3])
        print('Результат: ', script2(argv[2].split(','), int(argv[3])))
    else:
        print('!!! Некорректно введены параметры')

# ------------------------- # 7 # ------------------------- #

# 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fibo_gen().
# Функция отвечает за получение факториала числа, а в цикле
# необходимо выводить только первые 15 чисел.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def mygenerator(a):
    j = 1
    for i in range(1, a + 1):
        j *= i
        yield j

for a in mygenerator(15):
    print(a)

# ------------------------- #   # ------------------------- #

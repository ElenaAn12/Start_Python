# ---------------------------- # 1 # ---------------------------- #

# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен
# принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
# первым элементом первой строки второй матрицы и т.д.

import random


class Matrix:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.b = [self.p1, self.p2]

    def __str__(self):
        return '\n'.join([''.join(['%d\t' % i for i in ih]) for ih in self.b])

    def __add__(self, other):
        t = []
        tt = []
        for i in range(len(self.b[0])):
            t.append(self.b[0][i] + other.b[0][i])
        for i in range(len(self.b[1])):
            tt.append(self.b[1][i] + other.b[1][i])
        return Matrix(t, tt)


a = Matrix([random.randint(0, 9) for i in range(3)], [random.randint(0, 9) for i in range(3)])
b = Matrix([random.randint(0, 9) for i in range(3)], [random.randint(0, 9) for i in range(3)])
print(a)
print('')
print(b)
print('')
print(a + b)

# ---------------------------- # 2 # ---------------------------- #

# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры:
# размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5),
# для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.


class Clothes:
    """ New class Clothes """

    def __init__(self, size, height):
        self.size = size
        self.height = height

    def cloth(self):
        """ Calculation of fabric """

        question = input('What do you want to sew, "coat" or "suit"?: ').lower()
        if question == 'suit':
            self.height = float(2 * self.height + 0.3)
            print(f'To sew a suit you will need {self.height / 100} meters of fabric')
        elif question == 'coat':
            self.size = float(self.size/6.5 + 0.5)
            print(f'To sew a coat you will need {"%.3f" % self.size} meters of fabric.')
        else:
            print('Invalid data entry.')


a = Clothes(
    float(input('What size clothes do you wear? ')),
    float(input('Product length? '))
)
a.cloth()

# ---------------------------- # 3 # ---------------------------- #

# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()),
# умножение (mul()), деление (truediv()).Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно
# осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество
# ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида **\n\n***...,
# где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: **\n\n. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5
# Тогда метод make_order() вернет строку: **\n\n***.

class Cell:
    def __init__(self, cells):
        self.cells = cells
        self.value = None

    def __add__(self, other):
        return other + self.cells

    def __sub__(self, other):
        sub = self.cells - other.cells
        if sub > 0:
            return int(sub)
        else:
            return f'Неверный ввод данных.'

    def __mul__(self, other):
        return other * self.cells

    def __truediv__(self, other):
        return other / self.cells

    def make_order(self, row):
        result = ''
        for i in range(int(self.cells / row)):
            result += '*' * row + '\n'
        result += '*' * (self.cells % row)
        return result


a = Cell(42)
b = Cell(12)
print(a.make_order(21))
print(a + b)
print(a - b)
print(a * b)
print("{:.2f}".format(a / b))
print(a.make_order(21))

# ---------------------------- #   # ---------------------------- #
